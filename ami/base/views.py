import logging

import rest_framework.request
from django.http import Http404
from rest_framework import serializers

from ami.main.models import Project

logger = logging.getLogger(__name__)


def get_active_project(
    request: rest_framework.request.Request,
    kwargs: dict | None = None,
    required: bool = False,
) -> Project | None:
    """
    Extract and return the active project from a request.

    Args:
        request: The DRF request object
        kwargs: URL kwargs (optional, used to extract pk from URL paths)
        require_project: Whether project_id is required (raises validation error if True and not found)

    Returns:
        Project instance if found, None otherwise (let the caller handle None case)
    """
    from ami.base.serializers import SingleParamSerializer

    param = "project_id"

    project_id = None
    # Extract from URL if `/projects/` is in the url path
    if kwargs and "/projects/" in request.path:
        project_id = kwargs.get("pk")

    # If not in URL, try query parameters
    if not project_id:
        # Look for project_id in GET query parameters or POST data
        # POST data returns a list of ints, but QueryDict.get() returns a single value
        project_id = request.query_params.get(param) or (request.data if isinstance(request.data, dict) else {}).get(
            param
        )

        project_id = SingleParamSerializer[int].clean(
            param_name=param,
            field=serializers.IntegerField(required=required, min_value=0),
            data={param: project_id} if project_id else {},
        )

    if not project_id:
        return None

    try:
        return Project.objects.get(id=project_id)
    except Project.DoesNotExist:
        return None


class ProjectMixin:
    """
    Mixin to help views extract the active project from the request.
    """

    require_project = False  # Project is optional
    request: rest_framework.request.Request
    kwargs: dict  # This is is generated by DRF from the URL pattern /api/projects/{project_id:int}/

    def get_active_project(self) -> Project | None:
        """
        Instance method wrapper around the standalone get_active_project function.
        Raises Http404 if project_id is required but not provided or the project does not exist.
        """
        project = get_active_project(
            request=self.request,
            kwargs=self.kwargs,
            required=self.require_project,
        )

        if not project and self.require_project:
            # project_id was required but not provided or invalid
            raise Http404("Project ID is required but was not provided or is invalid")

        return project
