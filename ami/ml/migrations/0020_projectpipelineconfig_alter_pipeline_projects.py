# Generated by Django 4.2.10 on 2025-03-09 23:41

import logging

from django.db import migrations, models
import django.db.models.deletion
from django.utils import timezone

logger = logging.getLogger(__name__)


def transfer_m2m_data(apps, schema_editor):
    Pipeline = apps.get_model("ml", "Pipeline")
    ProjectPipelineConfig = apps.get_model("ml", "ProjectPipelineConfig")

    logger.info("Transferring Project-Pipeline M2M data to ProjectPipelineConfig")
    for pipeline in Pipeline.objects.only("id").all():
        # Create new ProjectPipelineConfig entries
        for existing_project in pipeline.projects.only("id").all():
            logger.info(f"Creating ProjectPipelineConfig for {existing_project} and {pipeline}")
            ProjectPipelineConfig.objects.create(
                project_id=existing_project.pk,
                pipeline_id=pipeline.pk,
                enabled=True,
                config={},
            )


def revert_m2m_data(apps, schema_editor):
    # collect all projects related to pipelines through ProjectPipelineConfig
    # and set the projects field in Pipeline to those projects
    ProjectPipelineConfig = apps.get_model("ml", "ProjectPipelineConfig")
    Pipeline = apps.get_model("ml", "Pipeline")
    Project = apps.get_model("main", "Project")

    logger.info("Reverting Project-Pipeline M2M data from ProjectPipelineConfig")
    for pipeline in Pipeline.objects.only("id").all():
        project_ids = ProjectPipelineConfig.objects.filter(pipeline_id=pipeline.pk).values_list(
            "project_id", flat=True
        )
        projects = Project.objects.filter(id__in=project_ids)
        pipeline.projects.set(projects)


# Generated by Django 4.2.10 on 2025-03-09 23:41


class Migration(migrations.Migration):
    dependencies = [
        ("main", "0058_alter_project_options"),
        ("ml", "0019_alter_algorithm_task_type"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProjectPipelineConfig",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("enabled", models.BooleanField(default=True)),
                ("config", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "pipeline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_pipeline_configs",
                        to="ml.pipeline",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_pipeline_configs",
                        to="main.project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Project-Pipeline Configuration",
                "verbose_name_plural": "Project-Pipeline Configurations",
                "unique_together": {("pipeline", "project")},
            },
        ),
        migrations.AddField(
            model_name="pipeline",
            name="new_projects",
            field=models.ManyToManyField(
                blank=True, related_name="new_pipelines", through="ml.ProjectPipelineConfig", to="main.Project"
            ),
        ),
        migrations.RunPython(transfer_m2m_data, reverse_code=revert_m2m_data),
        migrations.RemoveField(
            model_name="pipeline",
            name="projects",
        ),
        migrations.RenameField(
            model_name="pipeline",
            old_name="new_projects",
            new_name="projects",
        ),
        migrations.AlterField(
            model_name="pipeline",
            name="projects",
            field=models.ManyToManyField(
                blank=True, related_name="pipelines", through="ml.ProjectPipelineConfig", to="main.Project"
            ),
        ),
    ]
