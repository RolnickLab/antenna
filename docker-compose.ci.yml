# Ensure this launches a separate stack for CI testing to avoid conflicts with local dev setup:
name: antenna-ci

volumes:
  ami_ci_postgres_data:
    driver: local
  minio_ci_data:
    driver: local

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    volumes:
      - .:/app:z
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      minio-init:
        condition: service_started
      rabbitmq:
        condition: service_started
      celeryworker:  # required to subscribe the worker to the pipelines in the db
        condition: service_healthy
    env_file:
      - ./.envs/.ci/.django
      - ./.envs/.ci/.postgres
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/local/postgres/Dockerfile
    volumes:
      - ami_ci_postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.envs/.ci/.postgres

  redis:
    image: redis:6

  celeryworker:
    <<: *django
    depends_on:
      - rabbitmq
    # start the worker with antenna_celeryworker to ensure it's discoverable by ami.ml.signals.get_worker_name
    command:
      - sh
      - -c
      - |
        python manage.py migrate &&
        python -m celery -A config.celery_app worker --queues=antenna -n antenna_celeryworker@%h -l INFO
    healthcheck:
      # make sure DATABASE_URL is inside the ./.envs/.ci/.postgres
      test: ["CMD-SHELL", "celery -A config.celery_app inspect ping -d antenna_celeryworker@$(hostname) | grep -q pong"]
      interval: 10s
      timeout: 50s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - ./.envs/.ci/.django

  minio:
    image: minio/minio:RELEASE.2024-11-07T00-52-20Z
    command: minio server --console-address ":9001" /data
    volumes:
      - "minio_ci_data:/data"
    env_file:
      - ./.envs/.ci/.django
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5

  minio-init:
    image: minio/mc:RELEASE.2025-03-12T17-29-24Z
    env_file:
      - ./.envs/.ci/.django
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./compose/local/minio/init.sh:/etc/minio/init.sh
    entrypoint: /etc/minio/init.sh

  ml_backend:
    build:
      context: ./processing_services/minimal
    volumes:
      - ./processing_services/minimal/:/app
    depends_on:
      - rabbitmq
    networks:
      default:
        aliases:
          - processing_service
