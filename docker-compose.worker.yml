services:
  django: &django
    build:
      context: .
      # This is the most important setting to test the production configuration of Django.
      dockerfile: ./compose/production/django/Dockerfile
    image: insectai/ami_backend
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    volumes:
      - ./config:/app/config
    ports:
      - "5001:5000"
    extra_hosts:
      - "db:${DATABASE_IP}"
      - "redis:${REDIS_IP}"
    command: /start
    scale: 0  # We don't need the Django service running, but we inherit the worker settings from it.
    restart: always

  celeryworker:
    <<: *django
    scale: 1  # 1 worker per machine, celery will scale worker pool to the number of available CPUs.
    ports: []
    command: /start-celeryworker
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "/celery/healthcheck.sh"]
      interval: 30s      # Check every 30 seconds
      timeout: 15s       # Healthcheck must complete within 15s (ping timeout is 10s + overhead)
      retries: 3         # Mark unhealthy after 3 consecutive failures (90s total)
      start_period: 60s  # Grace period during container startup
    labels:
      - "autoheal=true"  # Enable autoheal to restart this container when unhealthy

  autoheal:
    image: willfarrell/autoheal:latest
    container_name: ami_worker_autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=autoheal
      - AUTOHEAL_INTERVAL=10      # Check container health every 10 seconds
      - AUTOHEAL_START_PERIOD=60  # Don't restart containers for 60s after they start
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
